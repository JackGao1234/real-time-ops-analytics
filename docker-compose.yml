services:
  # 1. Redpanda - Kafka Protocol Compatible Broker
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      # 監聽內部網路 (9092) 和外部主機 (19092)
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:${KAFKA_EXTERNAL_PORT:-19092}
      # 廣播地址：關鍵設定，讓外部客戶端 (localhost) 和內部服務 (redpanda:9092) 都能連線
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:${KAFKA_EXTERNAL_PORT:-19092}
      - --set redpanda.auto_create_topics_enabled=true # 允許自動創建 Topic (開發環境便利)
    ports:
      - "${KAFKA_EXTERNAL_PORT:-19092}:${KAFKA_EXTERNAL_PORT:-19092}" # Kafka 協議端口 (外部訪問)
    networks:
      - analytic_net
    healthcheck:
      test: ["CMD", "rpk", "cluster", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. ClickHouse Server - OLAP 分析資料庫
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    # 確保 Redpanda 啟動後才啟動 ClickHouse (處理器依賴)
    depends_on:
      - redpanda
    ports:
      - "8123:8123" # HTTP 端口 (用於 API 連線、Grafana 等)
      - "9000:9000" # 原生 TCP 端口 (clickhouse-client 或驅動程式連線用)
    volumes:
      # 持久化 ClickHouse 數據 (這個Data Volume必須被移除，DDL 才能重新執行)
      - clickhouse_data:/var/lib/clickhouse
      # === 確保您的 DDL 檔案掛載在這裡 (這是關鍵) ===
      - ./db:/docker-entrypoint-initdb.d
    environment:
      # 來自 .env 文件的自訂帳密。
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DB=${CLICKHOUSE_DB}
    networks:
      - analytic_net
    healthcheck:
      # 使用 clickhouse-client 進行原生協議檢查，比 cURL 檢查 HTTP 端口更可靠
      test: ["CMD", "clickhouse-client", "--user", "${CLICKHOUSE_USER}", "--password", "${CLICKHOUSE_PASSWORD}", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # 給予足夠時間完成初始化
  # 3. Stream Processor 服務
  processor:
    # 使用當前目錄下的 Dockerfile 進行構建
    build:
      context: ./processor
      dockerfile: Dockerfile
    container_name: processor
    # 確保 ClickHouse 和 Redpanda 啟動並健康後，Processor 才啟動
    depends_on:
      clickhouse:
        condition: service_healthy
      redpanda:
        condition: service_started
    environment:
      # ClickHouse 連線變數
      - CH_HOST=clickhouse
      - CH_PORT=8123
      - CH_USER=${CLICKHOUSE_USER}
      - CH_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CH_DATABASE=${CLICKHOUSE_DB}

      # Kafka 連線變數
      - KAFKA_BROKER_INTERNAL=${KAFKA_BROKER_INTERNAL}
      - KAFKA_CONSUMER_GROUP=${KAFKA_CONSUMER_GROUP}
      - ORDER_TOPIC=${ORDER_TOPIC}
      - PAYMENT_TOPIC=${PAYMENT_TOPIC}
      - POLL_TIMEOUT_MS=${POLL_TIMEOUT_MS}
    networks:
      - analytic_net
    # 設置啟動命令，讓它運行 main.py
    command: python3 main.py

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: analytics_api
    environment:
      # 將所有必要的環境變數傳遞給 API 服務
      - CH_HOST=clickhouse
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
      - CLICKHOUSE_DB=${CLICKHOUSE_DB}
    ports:
      - "8000:8000"  # 將容器的 8000 端口映射到主機的 8000 端口
    depends_on:
      clickhouse:
        condition: service_healthy # 確保 ClickHouse 已經運行且健康
    networks:
      - analytic_net

networks:
  # 專用網路，隔離服務並允許容器名稱解析 (例如 redpanda:9092)
  analytic_net:
    driver: bridge

volumes:
  # 定義持久化Data Volume，用於保存 ClickHouse 的數據
  clickhouse_data:
